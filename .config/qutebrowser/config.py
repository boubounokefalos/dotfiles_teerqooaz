# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'close', 'qa': 'quit', 'w': 'session-save', 'wq': 'quit --save', 'wqa': 'quit --save'}

# Backend to use to display websites. qutebrowser supports two different
# web rendering engines / backends, QtWebKit and QtWebEngine. QtWebKit
# was discontinued by the Qt project with Qt 5.6, but picked up as a
# well maintained fork: https://github.com/annulen/webkit/wiki -
# qutebrowser only supports the fork. QtWebEngine is Qt's official
# successor to QtWebKit. It's slightly more resource hungry than
# QtWebKit and has a couple of missing features in qutebrowser, but is
# generally the preferred choice.
# Type: String
# Valid values:
#   - webengine: Use QtWebEngine (based on Chromium).
#   - webkit: Use QtWebKit (based on WebKit, similar to Safari).
c.backend = 'webengine'

# When to use Chromium's low-end device mode. This improves the RAM
# usage of renderer processes, at the expense of performance.
# Type: String
# Valid values:
#   - always: Always use low-end device mode.
#   - auto: Decide automatically (uses low-end mode with < 1 GB available RAM).
#   - never: Never use low-end device mode.
c.qt.low_end_device_mode = 'auto'

# Time interval (in milliseconds) between auto-saves of
# config/cookies/etc.
# Type: Int
c.auto_save.interval = 15000

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Automatically enter insert mode if an editable element is focused
# after loading the page.
# Type: Bool
c.input.insert_mode.auto_load = true

# When to show the scrollbar.
# Type: String
# Valid values:
#   - always: Always show the scrollbar.
#   - never: Never show the scrollbar.
#   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
c.scrolling.bar = 'when-searching'

# Padding (in pixels) around text for tabs.
# Type: Padding
c.tabs.padding = {'bottom': 5, 'left': 5, 'right': 5, 'top': 5}

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page. *
# `{audio}`: Indicator for audio/mute status.
# Type: FormatString
c.tabs.title.format = '{title}'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '20%'

# What search to start when something else than a URL is entered.
# Type: String
# Valid values:
#   - naive: Use simple/naive check.
#   - dns: Use DNS requests (might be slow!).
#   - never: Never search automatically.
c.url.auto_search = 'naive'

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'about:blank'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?q={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'file:///home/darkdog/.config/startpage/index.html'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#252525'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#e8e8ec'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#252525'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#252525'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#252525'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#e8e8ec'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#252525'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#252525'

# Color gradient start for download backgrounds.
# Type: QtColor
c.colors.downloads.start.bg = '#e8e8ec'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = '#252525'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#02a2ac'

# Color gradient interpolation system for download backgrounds.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'rgb'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#e8e8ec'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#252525'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#e8e8ec'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#e8e8ec'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#e8e8ec'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#e8e8ec'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#252525'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#e8e8ec'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#252525'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#e8e8ec'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#252525'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#252525'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#02a2ac'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#e8e8ec'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#e8e8ec'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#252525'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#e8e8ec'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#e8e8ec'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = '#e8e8ec'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#e8e8ec'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#e8e8ec'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#e8e8ec'

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = '#252525'

# Color gradient start for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.start = '#02a2ac'

# Color gradient end for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.stop = '#02a2ac'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#e8e8ec'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#252525'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#e8e8ec'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#252525'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = '#252525'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#e8e8ec'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = '#252525'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#e8e8ec'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = '#e8e8ec'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '10pt Jura'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '12pt Jura'
